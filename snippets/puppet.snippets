# vim: nofoldenable foldmethod=manual
#
# add 's' for avoid conflicts of redefined types 'rodjek/vim-puppet'
# http://docs.puppetlabs.com/references/latest/type.html

# Puppet DSL
snippet file
	file {
	  '${1:filename}':
	    ensure  => ${2:file},
	    source  => 'puppet:///modules/${3:source}',
	    owner   => ${4:root},
	    group   => ${5:root},
	    mode    => '${6:0755}',
	    notify  => Service['${7:name}'],
	    require => Package['${8:name}'];
	}
snippet exec
	exec {
	  '${1:name}':
	    command	=> '${2:command}',
	    cwd		=> '${3:launch-path}',
	    user	=> root,
	    creates	=> '${4:bin}',
	    require	=> [Package['${5:pkg}'],File['${6:file}']],
	    refreshonly	=> ${7:true},
	    onlyif	=> '${8:run_if_true}',
	    unless	=> '${9:run_if_false}',
	    logoutput	=> ${10:on_failure};
	}
snippet package
	package {
	  '${1:package_name}':
	    ensure => ${2:installed};
	}
snippet mailalias
	mailalias {
	  '${1:alianame}':
	    ensure    => ${2:present},
	    recipient => '${3:recipient}';
	}
snippet maillist
	maillist {
	  '${1:listname}':
	    ensure	=> ${2:present},
	    admin	=> '${3:admin_email}',
	    description => '${4:list_desc}',
	    mailserver	=> '${5:mail_hostname}',
	    password	=> '${6:admin_pwd}',
	    webserver	=> '${7:web_hostname}';
	}
snippet mount
	mount {
	  '${1:name}':
	    ensure  => ${2:present},
	    device  => '${3:device}',
	    fstype  => '${4:fstype}',
	    options => '${5:opts}';
	}
snippet service
	service {
	  '${1:name}':
	    ensure	=> ${2:running},
	    enable	=> ${3:true},
	    hasrestart	=> ${4:true},
	    hasstatus	=> ${5:true},
	    pattern	=> ${6:pattern},
	    require	=> Package['${7:name}'];
	}
snippet user
	user {
	  '${1:login}':
	    ensure	=> ${2:present},
	    uid		=> '${3:1001}',
	    gid		=> '${4:1001}',
	    groups	=> '${5:admin}',
	    shell	=> '${6:/bin/zsh}',
	    home	=> '${7:/home/login}',
	    managehome	=> ${8:true},
	    comment	=> '${9:comment}',
	    system	=> ${10:false};
	}
snippet ssh_authorized_key
	ssh_authorized_key {
	  '${1:name}':
	    ensure  => ${2:present},
	    key	    => '${3:key_header_ommit}',
	    options => '${4:keys_opts}',
	    type    => '${5:type}',
	    user    => '${6:user}';
	}
snippet sshkey
	sshkey {
	  '${1:name}':
	    ensure	  => ${2:present},
	    host_aliases  => '${3:host_alias}',
	    key		  => '${4:key_header_ommit}',
	    options	  => '${5:keys_opts}',
	    type	  => '${6:type}';
	}
snippet tidy
	tidy {
	  '${1:path}':
	    age => '${2:1w}',
	    matches => ${3:['[0-9]pub*.tmp','*.temp','tmpfile?']},
	    recurse => ${4:1},
	    rmdirs  => ${5:true};
	}
snippet cron
	cron {
	  '${1:name}':
	    ensure  => ${2:present},
	    command => '${3:command}',
	    user    => ${4:root},
	    hour    => ${5:hour},
	    minute  => ${6:minute},
	    weekday => ${7:weekday};
	}
snippet class
	# Class:: $1
	#
	#
	class ${1:classname} {
	  ${2:#code...}
	} # Class:: $1
snippet defs
	# Define:: $1
	# Args:: $2
	#
	define ${1:defname}(${2:args}) {
	  ${3:#code}
	} # Define: $1
snippet #head
	# Module:: ${1:modulename}
	# Manifest:: ${2:init.pp}
	#
	# Author:: `system("git config user.name")` (<`system("git config user.email")`>)
	# Date:: `system("ruby -e 'puts Time.now'")`
	# Maintainer:: `system("git config user.name")` (<`system("git config user.email")`>)
	#
	${3}
snippet apt
	include 'apt::allowunauthenticated'

	apt::source {
	  '${1:source}':
	    source => 'puppet:///modules/${2:module}',
	    unauth => true;
	}
snippet File
	File['${1:file}'] { source => 'puppet:///modules/${2:source}' }
snippet line
	custom::line {
	  '${1:name}':
	    file    => '${2:file}',
	    line    => '${3:line}',
	    require => Pacakage['${4:pkg}'];
	}
# Language constructs
snippet case
	case ${1:$::operatingsystem} {
	  ${2:debian,ubuntu}: {
	    ${3:#Code...}
	  }
	  default: {
	    err "${::operatingsystem} not supported yet"
	  }
	} # Case $1
snippet ife
	if $::${1:variable} {
	  ${2}
	} else {
	  $[3]
	} # if $1
snippet if
	if $::${1:variable} {
	  ${2}
	} # if $1
# Functions
snippet alert
	alert("${1:message}")${2}
snippet crit
	crit("${1:message}")${2}
snippet debug
	debug("${1:message}")${2}
snippet defined
	defined(${1:Resource}["${2:name}"])${3}
snippet emerg
	emerg("${1:message}")${2}
snippet extlookup Simple extlookup
	extlookup("${1:variable}")${2}
snippet extlookup Extlookup with defaults
	extlookup("${1:variable}", "${2:default}")${3}
snippet extlookup Extlookup with defaults and custom data file
	extlookup("${1:variable}", "${2:default}", "${3:data source}")${4}
snippet fail
	fail("${1:message}")${2}
snippet info
	info("${1:message}")${2}
snippet inline_template
	inline_template("<%= ${1} %>")${2}
snippet notice
	notice("${1:message}")${2}
snippet realize
	realize(${1:Resource}[${2:name}])${3}
snippet regsubst
	regsubst(${1:hay stack}, ${2:needle}, "${3:replacement}")${4}
snippet inc
	include ${1:classname}${2}
snippet split
	split(${1:hay stack}, "${2:patten}")${3}
snippet versioncmp
	versioncmp("${1:version}", "${2:version}")${3}
snippet warning
	warning("${1:message}")${2}
